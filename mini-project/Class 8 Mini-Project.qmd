---
title: "Class 8 Mini-Project"
author: "A16125573"
format: pdf
---
> Q1-15, 14 is optional 

# 1. Exploratory data analysis

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
head(wisc.df)
```

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
```


```{r}
# Create diagnosis vector for later
diagnosis <- as.numeric(wisc.df$diagnosis == "M") 
```


> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```
There are 569 rows, thus 569 observations in this dataset.

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis)
# 0s are Benigne are 1s are Malignant
```
212 observations are malignant

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
length(grep("_mean", colnames(wisc.data)))
```
There are 10 features in the data suffixed with _mean. 


# 2. Principal Component Analysis


```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```


```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

```{r}
# Look at summary of results
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% is captured by PC1. 

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

Looking at the "Cumulative Proportion" row, 3 PCs can describe at least 70% of the original variance. 


> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs are required to describe at least 90% of the original variance. 


```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

I noticed that the column names are colored red and row names are colored black. There are arrows pointing towards the column names. This plot is difficult to understand because all the datapoints are labeled as column names or numbers. 


```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[, c(1, 2)], col = (diagnosis+1), 
     xlab = "PC1", ylab = "PC2")
```


> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

I noticed that the red and black clusters are more separated for the PC1 vs PC2 plot. 

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, c(1, 3)], col = diagnosis+1, 
     xlab = "PC1", ylab = "PC3")
```


```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=df$diagnosis) + 
  geom_point()
```



```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```



```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```
 
```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?


```{r}
wisc.pr$rotation[,1]
```
The component is -0.26085376. 

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
summary(wisc.pr)
```
5 PCs are required to explain 80% of the variance. 



# 3. Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
```


```{r}
# Calculate the (Euclidean) distances between all pairs of observations
data.dist <- dist(data.scaled)
```

```{r}
# Create a hierarchical clustering model
wisc.hclust <- hclust(data.dist, method="complete")
```

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```
The clustering model has 4 clusters at height around 19. 


```{r}
# cut the tree so that it has 4 clusters
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
```

```{r}
table(wisc.hclust.clusters, diagnosis)
```
> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=5)
table(wisc.hclust.clusters, diagnosis)

```
5 clusters could be better as clusters 1, 2, and 5 repesent the malignant diagnosis and clusters 3, 4 represent the benign diagnosis. 



> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
wisc.hclust1 <- hclust(data.dist, method="ward.D2")
wisc.hclust1.clusters <- cutree(wisc.hclust1, k=2)
table(wisc.hclust1.clusters, diagnosis)

```
ward.D2 gives my favorite results because it can create clear clusters for benign and malignant cells even when cutting into 2 clusters. 


# 4. OPTIONAL: K-means clustering

```{r}
wisc.km <- kmeans(data.scaled, centers= 2, nstart= 20)

table(wisc.km$cluster, diagnosis)
```

> Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?

K-means separate the two diagnoses well as it creates more separated than my hclust ward.D2 results. 

```{r}
table(wisc.km$cluster, wisc.hclust.clusters)
```


# 5. Combining methods

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:7]), method="ward.D2")

plot(wisc.pr.hclust)
```



```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis+1)
```

```{r}
g <- as.factor(grps)
levels(g)
```

```{r}
# reorder the levels
g <- relevel(g,2)
levels(g)
```


```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```


```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
```

```{r}
# Cut this hierarchical clustering model into 2 clusters
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

The new model is better at separating out the diagnoses. 





