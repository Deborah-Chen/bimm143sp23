---
#header 
title: "Class 5. Data Visualization"
author: "A16138722"
format: html
---

# Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these let's play with the in-built `cars` dataset.

```{r}
head(cars, 3) #returns the top 3 rows of cars dataset
```

To use 'base' R, I can simply call the 'plot()' function:

```{r}
plot(cars)
```

To use `ggplot2` package, first I need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render mt report.

Any package in R that isn't part of 'base' R, I need to call it everytime I want to use it

The main function in this package is called `ggplot()`. Can I just called it?

```{r}
# No, it would show "Error in ggplot() : could not find function "ggplot"" 

# install.packages("ggplot2")

library(ggplot2)
ggplot()
```

To make a figure with ggplotI need always at least 3 things:

-   **the data** (i.e. what I want to plot)
-   **aes** (the aesthetic mapping of the data to the plot I want)
-   the **geoms** (i.e. how I want to plot the data)

```{r}
ggplot(data = cars) +
  aes(x=speed, y=dist) + 
  geom_point()
```

If I want to add more stuff, I can just keep adding layers, e.g.

```{r}
ggplot(data = cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth()
```

Ggplot is much more verbose than base R plots for standard plots but it has a consistent layer system that I can use to make just about any plot.

Let's make a plot with a straight line fit - i.e. a linear model and no standard error

```{r}
ggplot(data = cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(method="lm", se=FALSE)

# help(geom_smooth)
```

Let's add a title and subtitle

```{r}
ggplot(data = cars) +
  aes(x=speed, y=dist) + 
  geom_point() + 
  geom_smooth(method="lm", se=FALSE) + 
  labs(title="Stopping distance for old cars", 
       subtitle="From the inbuilt car dataset", 
       caption="BIMM143", 
       x="Speed (MPG)", y="Stopping distance (ft)") +
  theme_bw()
```

## A more complicated plot

Let's plot some gene expression data.

The code below reads the results of a differential expression analysis where a new anti-viral drug is being tested.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. How many genes are in this dataset?

```{r}
nrow(genes)

ncol(genes)
```

> Q. How can we summarize that last column - the "State" column?

```{r}
table(genes$State)
```

```{r}

ggplot(genes) + #sets up the canvas 
  aes(x=Condition1, y=Condition2) + 
  geom_point()

```

```{r}

p <- ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()

```

I can now just call `p` when I want to plot or add to it.

```{r}
p + labs(title="Gene Expression changes upon drug treatment",
           x="Control", y="Drug treated") + 
  scale_colour_manual( values=c("red","gray","blue") )
```

## Going Further

Where I read a slightly larger dataset

```{r}
# file location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)

```

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3) #'alpha' will make the points more transparent
```

A very useful layer to add sometimes is for "facetting"

```{r}
ggplot(gapminder) + 
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent) #separate the data by continent 
```

Bar plot

```{r}
#install.packages("dplyr") 
library(dplyr)

```


```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5

ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```


```{r}
ggplot(mtcars) + aes(x=mpg, y=disp) + geom_point()
```

```{r}
ggplot(mtcars, aes(mpg, disp)) + geom_point()
```

